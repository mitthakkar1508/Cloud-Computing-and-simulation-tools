import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

import org.cloudbus.cloudsim.Cloudlet;
import org.cloudbus.cloudsim.CloudletSchedulerSpaceShared;
import org.cloudbus.cloudsim.CloudletSchedulerTimeShared;
import org.cloudbus.cloudsim.Datacenter;
import org.cloudbus.cloudsim.DatacenterBroker;
import org.cloudbus.cloudsim.DatacenterCharacteristics;
import org.cloudbus.cloudsim.Host;
import org.cloudbus.cloudsim.Log;
import org.cloudbus.cloudsim.Pe;
import org.cloudbus.cloudsim.Storage;
import org.cloudbus.cloudsim.UtilizationModelFull;
import org.cloudbus.cloudsim.Vm;
import org.cloudbus.cloudsim.VmAllocationPolicySimple;
import org.cloudbus.cloudsim.VmSchedulerSpaceShared;
import org.cloudbus.cloudsim.VmSchedulerTimeShared;
import org.cloudbus.cloudsim.core.CloudSim;
import org.cloudbus.cloudsim.provisioners.BwProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.PeProvisionerSimple;
import org.cloudbus.cloudsim.provisioners.RamProvisionerSimple;

/**
 * 
 */

/**
 * @author mitthakkar
 *
 */
public class CloudSimSimulationExample {

		public static void main(String[] args) {
			int numUser=1;
			Calendar cal = Calendar.getInstance();
			boolean traceFlag = false;
			CloudSim.init(numUser, cal, traceFlag);
			Datacenter dc = CreateDataCenter();
			
			DatacenterBroker dcb = null;
			try {
				dcb = new DatacenterBroker("dcb1");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			List<Cloudlet> cloudletList = new ArrayList<Cloudlet>();
			long cloudletLength = 40000;
			int pesNumber = 1;
			long cloudletFileSize = 300;
			long cloudletOutputSize = 400;
			UtilizationModelFull fullUtilize = new UtilizationModelFull();
			for(int cloudletId=0;cloudletId<60;cloudletId++) {
			Cloudlet newCloudlet = new Cloudlet(cloudletId, cloudletLength, pesNumber, cloudletFileSize, cloudletOutputSize,fullUtilize, fullUtilize, fullUtilize);
			newCloudlet.setUserId(dcb.getId());
			cloudletList.add(newCloudlet);
			}
			
			
			
			List<Vm> vmList = new ArrayList<Vm>();
			long diskSize = 20000;
			int ram = 2000;
			int mips = 1000;
			int bandWidth = 1000;
			int vcpu = 1;
			String vmm = "Xen";
			for(int vmId =0 ;vmId<40;vmId++) {
			Vm virtualMachine = new Vm(vmId, dcb.getId(), mips, vcpu, ram, bandWidth, diskSize, vmm, new CloudletSchedulerTimeShared());
			vmList.add(virtualMachine);
			}
			
			dcb.submitCloudletList(cloudletList);
			dcb.submitVmList(vmList);
			CloudSim.startSimulation();
			List<Cloudlet> finalCloudletExecutionResults = dcb.getCloudletReceivedList();
			CloudSim.stopSimulation();
			int cloudletNo=0;
			for(Cloudlet c : finalCloudletExecutionResults) {
				Log.printLine("result of cloudlet no:"+ cloudletNo );
				Log.printLine("====================================");
				Log.printLine("CloudletID" + c.getCloudletId() +",VM" + c.getVmId()+",status"+ c.getStatus()+",starttime" + c.getExecStartTime()+",finishtime"+ c.getFinishTime());
				Log.printLine("====================================");
				cloudletNo++;
			}
			
			
		}
private static Datacenter CreateDataCenter() {
	List<Pe> peList = new ArrayList<Pe>();
	PeProvisionerSimple peProvisioner = new PeProvisionerSimple(1000); 
	Pe core1 = new Pe(0, peProvisioner);
	peList.add(core1);
	Pe core2 = new Pe(1, peProvisioner);
	peList.add(core2);
	Pe core3 = new Pe(2, peProvisioner);
	peList.add(core3);
	Pe core4 = new Pe(3, peProvisioner);
	peList.add(core4);
	
	List<Host> hostList = new ArrayList<Host>();
	
	int ram = 8000;
	int bw = 8000;
	long storage = 100000;
	
	Host host1 = new Host(0, new RamProvisionerSimple(ram), new BwProvisionerSimple(bw), storage, peList, new VmSchedulerSpaceShared(peList));
	hostList.add(host1);
	Host host2 = new Host(0, new RamProvisionerSimple(ram), new BwProvisionerSimple(bw), storage, peList, new VmSchedulerSpaceShared(peList));
	hostList.add(host2);
	Host host3 = new Host(0, new RamProvisionerSimple(ram), new BwProvisionerSimple(bw), storage, peList, new VmSchedulerSpaceShared(peList));
	hostList.add(host3);
	Host host4 = new Host(0, new RamProvisionerSimple(ram), new BwProvisionerSimple(bw), storage, peList, new VmSchedulerSpaceShared(peList));
	hostList.add(host4);
	
	String architecture = "x86";
	String os = "linux";
	String vmm = "Xen";
	double timeZone = 5.0;
	double costPerSec = 0.1;
	double costPerMem = 0.1;
	double costPerStorage = 0.05;
	double costPerBw = 0.1;
	LinkedList<Storage> SANstorage = new LinkedList<Storage>();
	DatacenterCharacteristics characteristics = new DatacenterCharacteristics(architecture, os, vmm, hostList, timeZone, costPerSec, costPerMem, costPerStorage, costPerBw);
	Datacenter dc = null;
	try {
		dc = new Datacenter("DC1",characteristics, new VmAllocationPolicySimple(hostList),SANstorage,1);
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return dc;
	
	}
}
